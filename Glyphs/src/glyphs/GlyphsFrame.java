package glyphs;

import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author algol
 */
public class GlyphsFrame extends JFrame {

    private final GlyphsComponent glyphComponent;

    public GlyphsFrame(final String[] fonts, final String[] text) {

        initComponents();

        textLines.setModel(new DefaultComboBoxModel<>(text));
        glyphComponent = new GlyphsComponent(fonts, (String)textLines.getModel().getSelectedItem());
        fontSizeSp.setValue(GlyphsComponent.FONT_SIZE);
        cbActionPerformed(null);

        scrollPane.setViewportView(glyphComponent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textLines = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbRuns = new javax.swing.JCheckBox();
        cbIGlyphs = new javax.swing.JCheckBox();
        cbCGlyphs = new javax.swing.JCheckBox();
        fontSizeSp = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Glyph rendering example");
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(1000, 600));

        textLines.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        textLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textLinesActionPerformed(evt);
            }
        });

        jLabel1.setText("Glyph Outlines:");

        jLabel2.setText("Text:");

        cbRuns.setSelected(true);
        cbRuns.setText("Font runs");
        cbRuns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRunsActionPerformed(evt);
            }
        });

        cbIGlyphs.setSelected(true);
        cbIGlyphs.setText("Individual glyphs");
        cbIGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIGlyphsActionPerformed(evt);
            }
        });

        cbCGlyphs.setText("Combined glyphs");
        cbCGlyphs.setEnabled(false);
        cbCGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCGlyphsActionPerformed(evt);
            }
        });

        fontSizeSp.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        fontSizeSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSizeSpStateChanged(evt);
            }
        });

        jLabel3.setText("Font size:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbRuns)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbIGlyphs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbCGlyphs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fontSizeSp, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textLines, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbRuns)
                    .addComponent(cbIGlyphs)
                    .addComponent(cbCGlyphs)
                    .addComponent(fontSizeSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbRunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRunsActionPerformed
        cbActionPerformed(evt);
    }//GEN-LAST:event_cbRunsActionPerformed

    private void textLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textLinesActionPerformed
        final String line = (String)textLines.getModel().getSelectedItem();
        glyphComponent.setLine(line);
    }//GEN-LAST:event_textLinesActionPerformed

    private void cbIGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIGlyphsActionPerformed
        cbActionPerformed(evt);
    }//GEN-LAST:event_cbIGlyphsActionPerformed

    private void cbCGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCGlyphsActionPerformed
        cbActionPerformed(evt);
    }//GEN-LAST:event_cbCGlyphsActionPerformed

    private void fontSizeSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fontSizeSpStateChanged
        final int fontSize = ((SpinnerNumberModel)fontSizeSp.getModel()).getNumber().intValue();
        glyphComponent.setFontSize(fontSize);
    }//GEN-LAST:event_fontSizeSpStateChanged

    private void cbActionPerformed(java.awt.event.ActionEvent evt) {
        final boolean drawRuns = cbRuns.isSelected();
        final boolean drawIndividual = cbIGlyphs.isSelected();
        final boolean drawCombined = cbCGlyphs.isSelected();
        glyphComponent.setBoundaries(drawRuns, drawIndividual, drawCombined);
    }

    private static String[] loadText(final String fnam) throws IOException {
        try(final BufferedReader in = new BufferedReader(new InputStreamReader(GlyphsFrame.class.getResourceAsStream(fnam), StandardCharsets.UTF_8))) {
            final List<String> ls = in.lines().filter(line -> line.length()>0 && !line.startsWith("#")).collect(Collectors.toList());
            final String[] text = ls.toArray(new String[ls.size()]);

            return text;
        }
    }
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {

        final String[] fonts = loadText("fonts.txt");
        final String[] text = loadText("text.txt");
        System.out.printf("text=%s\n", text[0]);

        try {
            /* Set the system look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //</editor-fold>
        } catch (final ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GlyphsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        EventQueue.invokeLater(() -> {
            new GlyphsFrame(fonts, text).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbCGlyphs;
    private javax.swing.JCheckBox cbIGlyphs;
    private javax.swing.JCheckBox cbRuns;
    private javax.swing.JSpinner fontSizeSp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JComboBox<String> textLines;
    // End of variables declaration//GEN-END:variables
}
