package au.gov.asd.tac.constellation.visual.opengl.utilities.glyphs;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author algol
 */
public class GlyphsFrame extends JFrame {

    private final GlyphManagerBI glyphComponent;
    private final JFrame imageFrame;

    public GlyphsFrame(final String[] fontNames, final String[] text) {

        initComponents();

        imageFrame = new JFrame("Texture buffer (highest page)");
        imageFrame.getContentPane().setBackground(Color.DARK_GRAY);
        imageFrame.getContentPane().setPreferredSize(new Dimension(GlyphManagerBI.DEFAULT_TEXTURE_BUFFER_SIZE, GlyphManagerBI.DEFAULT_TEXTURE_BUFFER_SIZE));
        imageFrame.getContentPane().setLayout(new BorderLayout());
//        imageFrame.getContentPane().setBackground(Color.BLACK);
//        imageFrame.setPreferredSize(new Dimension(TEXTURE_BUFFER_SIZE*2, TEXTURE_BUFFER_SIZE*2));
        imageFrame.getContentPane().add(new JLabel(), BorderLayout.CENTER);
//        imageFrame.getContentPane().getComponent(0).setPreferredSize(new Dimension(TEXTURE_BUFFER_SIZE, TEXTURE_BUFFER_SIZE));
        imageFrame.pack();
        imageFrame.setVisible(true);
        imageFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textLines.setModel(new DefaultComboBoxModel<>(text));
        glyphComponent = new GlyphManagerBI(fontNames, Font.PLAIN, GlyphManagerBI.DEFAULT_FONT_SIZE, GlyphManagerBI.DEFAULT_TEXTURE_BUFFER_SIZE, BufferedImage.TYPE_INT_ARGB);

        final GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        final String[] availablefonts = ge.getAvailableFontFamilyNames(Locale.ROOT);
        Arrays.sort(availablefonts);
        fontNameSp.setModel(new DefaultComboBoxModel<>(availablefonts));
        fontNameSp.getModel().setSelectedItem(fontNames.length>0 ? fontNames[0] : GlyphManagerBI.DEFAULT_FONT_NAME);

        fontSizeSp.setValue(GlyphManagerBI.DEFAULT_FONT_SIZE);
        cbActionPerformed();

        final BufferedImage img = glyphComponent.getImage();
        imageLabel.setIcon(new ImageIcon(glyphComponent.getImage()));
        glyphPanel.setPreferredSize(new Dimension(img.getWidth(), img.getHeight()));

        glyphComponent.setLine((String)textLines.getModel().getSelectedItem());

        showTextureBuffer();
    }

    private void showTextureBuffer() {
        final JLabel label = (JLabel)imageFrame.getContentPane().getComponent(0);
        label.setIcon(new ImageIcon(glyphComponent.getTextureBuffer()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textLines = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbRuns = new javax.swing.JCheckBox();
        cbIGlyphs = new javax.swing.JCheckBox();
        cbCGlyphs = new javax.swing.JCheckBox();
        fontSizeSp = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        fontNameSp = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbBold = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        glyphPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        textField = new javax.swing.JTextField();
        addTextButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Glyph rendering example");
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(1200, 400));

        textLines.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        textLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textLinesActionPerformed(evt);
            }
        });

        jLabel1.setText("Glyph Outlines:");

        jLabel2.setText("Text:");

        cbRuns.setText("Font runs");
        cbRuns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRunsActionPerformed(evt);
            }
        });

        cbIGlyphs.setText("Individual glyphs");
        cbIGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIGlyphsActionPerformed(evt);
            }
        });

        cbCGlyphs.setSelected(true);
        cbCGlyphs.setText("Combined glyphs");
        cbCGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCGlyphsActionPerformed(evt);
            }
        });

        fontSizeSp.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        fontSizeSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSizeSpStateChanged(evt);
            }
        });

        jLabel3.setText("Size:");

        fontNameSp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fontNameSp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontNameSpActionPerformed(evt);
            }
        });

        jLabel4.setText("Font:");

        cbBold.setText("Bold");
        cbBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBoldActionPerformed(evt);
            }
        });

        glyphPanel.setBackground(new java.awt.Color(0, 0, 0));
        glyphPanel.setPreferredSize(new java.awt.Dimension(1500, 220));
        glyphPanel.setLayout(new java.awt.BorderLayout());
        glyphPanel.add(imageLabel, java.awt.BorderLayout.CENTER);

        jScrollPane1.setViewportView(glyphPanel);

        textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldActionPerformed(evt);
            }
        });

        addTextButton.setText("Add text");
        addTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(60, 60, 60)
                        .addComponent(textLines, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbRuns)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbIGlyphs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbCGlyphs)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fontNameSp, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fontSizeSp, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbBold))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addTextButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbRuns)
                    .addComponent(cbIGlyphs)
                    .addComponent(cbCGlyphs)
                    .addComponent(fontSizeSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(fontNameSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cbBold))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbRunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRunsActionPerformed
        cbActionPerformed();
    }//GEN-LAST:event_cbRunsActionPerformed

    private void textLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textLinesActionPerformed
        final String line = (String)textLines.getModel().getSelectedItem();
        glyphComponent.setLine(line);
        repaint();
        showTextureBuffer();
    }//GEN-LAST:event_textLinesActionPerformed

    private void cbIGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIGlyphsActionPerformed
        cbActionPerformed();
    }//GEN-LAST:event_cbIGlyphsActionPerformed

    private void cbCGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCGlyphsActionPerformed
        cbActionPerformed();
    }//GEN-LAST:event_cbCGlyphsActionPerformed

    private void fontSizeSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fontSizeSpStateChanged
        fontActionPerformed();
    }//GEN-LAST:event_fontSizeSpStateChanged

    private void fontNameSpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontNameSpActionPerformed
        fontActionPerformed();
    }//GEN-LAST:event_fontNameSpActionPerformed

    private void cbBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBoldActionPerformed
        fontActionPerformed();
    }//GEN-LAST:event_cbBoldActionPerformed

    private void addTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTextButtonActionPerformed
        textActionPerformed();
    }//GEN-LAST:event_addTextButtonActionPerformed

    private void textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldActionPerformed
        textActionPerformed();
    }//GEN-LAST:event_textFieldActionPerformed

    @SuppressWarnings("unchecked")
    private void textActionPerformed() {
        final String text = textField.getText().trim();
        final DefaultComboBoxModel<String> model = (DefaultComboBoxModel)textLines.getModel();
        model.addElement(text);
        model.setSelectedItem(text);
        repaint();
    }
    private void cbActionPerformed() {
        final boolean drawRuns = cbRuns.isSelected();
        final boolean drawIndividual = cbIGlyphs.isSelected();
        final boolean drawCombined = cbCGlyphs.isSelected();
        glyphComponent.setBoundaries(drawRuns, drawIndividual, drawCombined);
        repaint();
    }

    private void fontActionPerformed() {
        final String[] fontNames = glyphComponent.getFonts();
//        final String[] fontNames = Arrays.stream(fonts).map(f -> f.getFontName()).toArray(String[]::new);
        final String fontName = (String)fontNameSp.getSelectedItem();
        fontNames[0] = fontName;

        final int fontStyle = cbBold.isSelected() ? Font.BOLD : Font.PLAIN;
        final int fontSize = ((SpinnerNumberModel)fontSizeSp.getModel()).getNumber().intValue();
//        final Font[] newFonts = Arrays.stream(fontNames).map(fn -> new Font(fn, style, fontSize)).toArray(Font[]::new);

        glyphComponent.setFonts(fontNames, fontStyle, fontSize);

        glyphComponent.createBackgroundGlyph(0.5f);
        showTextureBuffer();

        repaint();
    }

    private static String[] loadText(final String fnam) throws IOException {
        try(final BufferedReader in = new BufferedReader(new InputStreamReader(GlyphsFrame.class.getResourceAsStream(fnam), StandardCharsets.UTF_8))) {
            final List<String> ls = in.lines().filter(line -> line.length()>0 && !line.startsWith("#")).collect(Collectors.toList());
            final String[] text = ls.toArray(new String[ls.size()]);

            for(final String t : text) {
                System.out.printf("loadText %s [%s]\n", fnam, t);
            }

            return text;
        }
    }
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {

        final String[] fontNames = loadText("fonts.txt");
        final String[] text = loadText("text.txt");

        try {
            /* Set the system look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //</editor-fold>
        } catch (final ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GlyphsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        EventQueue.invokeLater(() -> {
            new GlyphsFrame(fontNames, text).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTextButton;
    private javax.swing.JCheckBox cbBold;
    private javax.swing.JCheckBox cbCGlyphs;
    private javax.swing.JCheckBox cbIGlyphs;
    private javax.swing.JCheckBox cbRuns;
    private javax.swing.JComboBox<String> fontNameSp;
    private javax.swing.JSpinner fontSizeSp;
    private javax.swing.JPanel glyphPanel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField textField;
    private javax.swing.JComboBox<String> textLines;
    // End of variables declaration//GEN-END:variables
}
